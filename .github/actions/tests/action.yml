name: Tests Workflow
description: 'Tests action to run the MonoGame Framework tests'
inputs:
  platform:
    description: 'Platform to run the action on'
    required: true
  shell:
    description: 'Shell to use for the action'
    required: true
  filter:
    description: 'Filter to apply to the tests'
    required: true

runs:
  using: "composite"
  steps:
      - name: Download Nuget
        uses: actions/download-artifact@v4
        with:
          name: nuget-${{ inputs.platform }}
          path: Artifacts/NuGet

      - name: Download tests-tools
        uses: actions/download-artifact@v4
        with:
          name: tests-tools-${{ inputs.platform }}
          path: tests tools

      - name: Download tests-desktopgl
        uses: actions/download-artifact@v4
        with:
          name: tests-desktopgl-${{ inputs.platform }}
          path: tests-desktopgl

      - name: Download tests-windowsdx
        uses: actions/download-artifact@v4
        with:
          name: tests-windowsdx-${{ inputs.platform }}
          path: tests-windowsdx
        if: ${{ inputs.platform == 'windows' }}

      - name: Run Tools Tests
        run: dotnet test "tests tools/MonoGame.Tools.Tests.dll" --blame-hang-timeout 1m --filter="TestCategory!=Effects"
        shell: ${{ inputs.shell }}

      - name: Run DirectX Audio Tests
        if: ${{ inputs.platform == 'windows' }}
        run: dotnet test --filter Category=Audio MonoGame.Tests.dll
        working-directory: tests-windowsdx
        shell: ${{ inputs.shell }}

      - name: Run DirectX All Tests Except Audio
        if: ${{ inputs.platform == 'windows' }}
        run: dotnet test --filter Category!=Audio MonoGame.Tests.dll
        working-directory: tests-windowsdx
        shell: ${{ inputs.shell }}

      # Run the DesktopGL tests on all platforms using NUnitLite runner not dotnet test
      # We have to run this is bits because the tests crash if too many are run in one go?
      - name: Run Framework Tests
        run: dotnet MonoGame.Tests.dll --timeout=300000 --test MonoGame.Tests.Framework ${{inputs.filter}}
        env:
          CI: true
        working-directory: tests-desktopgl
        shell: ${{ inputs.shell }}

      - name: Run Audio Tests
        run: dotnet MonoGame.Tests.dll --timeout=300000 --test MonoGame.Tests.Audio
        working-directory: tests-desktopgl
        shell: ${{ inputs.shell }}

      - name: Run Input Tests
        run: dotnet MonoGame.Tests.dll --timeout=300000 --test MonoGame.Tests.Input
        working-directory: tests-desktopgl
        shell: ${{ inputs.shell }}

      - name: Run Visual Tests
        run: dotnet MonoGame.Tests.dll --timeout=300000 --test MonoGame.Tests.Visual
        working-directory: tests-desktopgl
        shell: ${{ inputs.shell }}

      - name: Run Game Tests
        run: dotnet MonoGame.Tests.dll --timeout=300000 --where="Category = GameTest"
        working-directory: tests-desktopgl
        shell: ${{ inputs.shell }}